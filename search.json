[
  {
    "objectID": "sdv.html",
    "href": "sdv.html",
    "title": "SDV",
    "section": "",
    "text": "Maintain Data Relationships Automatically When Generating Synthetic Data\n\nMotivation\nWhen generating synthetic data, maintaining the real-world relationships between columns is essential for creating useful datasets for analysis, modeling, and testing. Without preserving these relationships, synthetic data may lead to incorrect insights or non-functional test systems.\nImagine trying to generate synthetic hotel guest data where room types should correlate with room rates. If these relationships aren’t preserved, you might end up with luxury suites priced cheaper than standard rooms, creating unrealistic patterns.\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import make_classification\n\n# Create synthetic hotel data with random values\nnp.random.seed(42)\nn_samples = 100\n\n# Create room types and assign random rates without preserving relationships\nroom_types = np.random.choice([\"BASIC\", \"DELUXE\", \"SUITE\"], size=n_samples)\n\n# Random rates that don't correlate with room types\nroom_rates = np.random.uniform(100, 500, size=n_samples)\n\n# Create a DataFrame\nhotel_data = pd.DataFrame({\"room_type\": room_types, \"room_rate\": room_rates})\n\n# Check average price by room type\nprint(hotel_data.groupby(\"room_type\")[\"room_rate\"].mean().sort_values())\n\nroom_type\nSUITE     266.506664\nBASIC     292.467652\nDELUXE    310.835909\nName: room_rate, dtype: float64\n\n\nAs we can see, with random generation, there’s no meaningful relationship between room types and room rates. The SUITE room might cost less than a BASIC room, which doesn’t reflect reality. For accurate analysis and testing, you’d need to manually implement complex rules to enforce these relationships.\n\n\nPreserving Column Relationships with GaussianCopulaSynthesizer\nThe GaussianCopulaSynthesizer in SDV automatically learns and preserves the statistical relationships between columns, allowing you to generate realistic synthetic data without manually coding complex rules.\nLet’s use the GaussianCopulaSynthesizer to maintain these relationships. First, we’ll load demo data, that will be used as real data for training:\n\nfrom sdv.datasets.demo import download_demo\n\nreal_data, metadata = download_demo(\n    modality=\"single_table\", dataset_name=\"fake_hotel_guests\"\n)\nprint(real_data.info(10))\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 500 entries, 0 to 499\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   guest_email         500 non-null    object \n 1   has_rewards         500 non-null    bool   \n 2   room_type           500 non-null    object \n 3   amenities_fee       455 non-null    float64\n 4   checkin_date        500 non-null    object \n 5   checkout_date       480 non-null    object \n 6   room_rate           500 non-null    float64\n 7   billing_address     500 non-null    object \n 8   credit_card_number  500 non-null    int64  \ndtypes: bool(1), float64(2), int64(1), object(5)\nmemory usage: 31.9+ KB\nNone\n\n\nCheck relationships between columns:\n\nprint(\"Real data average prices by room type:\")\nprint(real_data.groupby(\"room_type\")[\"room_rate\"].mean().sort_values())\n\nReal data average prices by room type:\nroom_type\nBASIC     131.446406\nDELUXE    207.673846\nSUITE     253.176579\nName: room_rate, dtype: float64\n\n\nNow let’s create and train a GaussianCopulaSynthesizer to learn these relationships:\n\nfrom sdv.single_table import GaussianCopulaSynthesizer\n\n# Create and fit the synthesizer\nsynthesizer = GaussianCopulaSynthesizer(metadata)\nsynthesizer.fit(real_data)\n\n# Generate synthetic data\nsynthetic_data = synthesizer.sample(100)\n\n# Check if the relationships are preserved\nprint(\"Synthetic data average prices by room type:\")\nprint(synthetic_data.groupby(\"room_type\")[\"room_rate\"].mean().sort_values())\n\nSynthetic data average prices by room type:\nroom_type\nBASIC     145.365060\nDELUXE    202.877333\nSUITE     244.730000\nName: room_rate, dtype: float64\n\n\nThe generated synthetic data maintains expected price patterns, with DELUXE and SUITE room types showing higher average rates compared to BASIC rooms."
  },
  {
    "objectID": "synthetic-data-generation/multi-table.html",
    "href": "synthetic-data-generation/multi-table.html",
    "title": "Generating Relational Data with SDV",
    "section": "",
    "text": "title: “Generating MultiTable Data with SDV” date: 2025-03-10 categories: synthetic-data-generation author: “John Doe” description: “Learn how to generate multi table synthetic data using SDV.”\n\nGenerating Relational Data with SDV\nSDV provides Multi-Table Models that help in generating relational synthetic data.\n\nSynthesizing multiple linked tables\nPreserving foreign key relationships\nEnsuring data consistency"
  },
  {
    "objectID": "getting-started/getting-started-intro.html",
    "href": "getting-started/getting-started-intro.html",
    "title": "SDV Gigs",
    "section": "",
    "text": "title: “Introduction to SDV” date: 2025-03-21 categories: getting-started"
  },
  {
    "objectID": "synthetic-data-generation/index.html",
    "href": "synthetic-data-generation/index.html",
    "title": "Data Generation with SDV",
    "section": "",
    "text": "title: “Data Generation Techniques” listing: contents: data-generation sort: “date desc” type: default categories: true\n\nData Generation with SDV\nExplore different synthetic data generation techniques:"
  },
  {
    "objectID": "synthetic-data-generation/single-table.html",
    "href": "synthetic-data-generation/single-table.html",
    "title": "Generating Tabular Data with SDV",
    "section": "",
    "text": "title: “Generating SingleTable Data with SDV” date: 2025-03-21 categories: data-generation author: “John Doe” description: “Learn how to generate single table synthetic data using SDV models.”\n\nGenerating Tabular Data with SDV\nSDV provides multiple models for generating tabular synthetic data, including:\n\nCTGAN (Conditional GAN)\nTVAE (Tabular Variational Autoencoder)\nGaussianCopula\n\nLet’s explore an example."
  }
]