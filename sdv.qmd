---
title: "SDV"
---

```{python}
# | echo: false
# | output: false
import warnings

warnings.filterwarnings("ignore", category=UserWarning)
```

### Maintain Data Relationships Automatically When Generating Synthetic Data

#### Motivation

When generating synthetic data, maintaining the real-world relationships between columns is essential for creating useful datasets for analysis, modeling, and testing. Without preserving these relationships, synthetic data may lead to incorrect insights or non-functional test systems.

Imagine trying to generate synthetic hotel guest data where room types should correlate with room rates. If these relationships aren't preserved, you might end up with luxury suites priced cheaper than standard rooms, creating unrealistic patterns.

```{python}
import pandas as pd
import numpy as np
from sklearn.datasets import make_classification

# Create synthetic hotel data with random values
np.random.seed(42)
n_samples = 100

# Create room types and assign random rates without preserving relationships
room_types = np.random.choice(["BASIC", "DELUXE", "SUITE"], size=n_samples)

# Random rates that don't correlate with room types
room_rates = np.random.uniform(100, 500, size=n_samples)

# Create a DataFrame
hotel_data = pd.DataFrame({"room_type": room_types, "room_rate": room_rates})

# Check average price by room type
print(hotel_data.groupby("room_type")["room_rate"].mean().sort_values())
```

As we can see, with random generation, there's no meaningful relationship between room types and room rates. The SUITE room might cost less than a BASIC room, which doesn't reflect reality. For accurate analysis and testing, you'd need to manually implement complex rules to enforce these relationships.

#### Preserving Column Relationships with GaussianCopulaSynthesizer

The [GaussianCopulaSynthesizer](https://docs.sdv.dev/sdv/single-table-data/modeling/synthesizers/gaussiancopulasynthesizer) in SDV automatically learns and preserves the statistical relationships between columns, allowing you to generate realistic synthetic data without manually coding complex rules.

Let's use the `GaussianCopulaSynthesizer` to maintain these relationships. First, we'll load demo data, that will be used as real data for training:


```{python}
from sdv.datasets.demo import download_demo

real_data, metadata = download_demo(
    modality="single_table", dataset_name="fake_hotel_guests"
)
print(real_data.info(10))
```

Check relationships between columns:

```{python}
print("Real data average prices by room type:")
print(real_data.groupby("room_type")["room_rate"].mean().sort_values())
```

Now let's create and train a `GaussianCopulaSynthesizer` to learn these relationships:

```{python}
from sdv.single_table import GaussianCopulaSynthesizer

# Create and fit the synthesizer
synthesizer = GaussianCopulaSynthesizer(metadata)
synthesizer.fit(real_data)

# Generate synthetic data
synthetic_data = synthesizer.sample(100)

# Check if the relationships are preserved
print("Synthetic data average prices by room type:")
print(synthetic_data.groupby("room_type")["room_rate"].mean().sort_values())
```

The generated synthetic data maintains expected price patterns, with DELUXE and SUITE room types showing higher average rates compared to BASIC rooms.


